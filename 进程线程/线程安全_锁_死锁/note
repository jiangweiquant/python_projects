线程安全
    -多个线程同时去操作一个’东西‘，可能存在数据混乱的情况
    python里面查看文档有些是线程安全的，内部集成了锁的机制，不需要再去添加锁
    -GIL只能保证同一时刻一个线程在运行，保证不了数据安全

锁
    -创建锁
    lock = threading.RLock()
    lock = threading.Lock()不支持锁多次（死锁），但是可以锁一次解一次，再锁一次解一次
    def task():
        lock.acquire()
        lock.acquire()

    函数里面手动申请锁和释放锁
        -申请锁 lock.acquire()#函数里面开头
        -释放锁 lock.release()#函数里面结尾
    函数里面基于上下文管理自动自行acquire和release
        with lock:
            函数主体

死锁本质【锁申请了还没释放又被申请】
    -第一种
        lock = threading.Lock()不支持锁多次（死锁），但是可以锁一次解一次，再锁一次解一次
        def task():
            lock.acquire()
            lock.acquire()
    -第二种
        两把锁，先各自申请一把锁，但每把锁还没释放，就被各自函数相互申请另一把锁