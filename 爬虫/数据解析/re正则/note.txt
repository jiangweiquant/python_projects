三种解析方式：
1、re解析
2、bs4解析
3、xpath解析

re:
    元字符
    .   \w(匹配数字/字母/下划线_[邮箱])  \d    ^$  a|b () [0-9a-zA-Z] [^0-9]

    量词：控制元字符出现的次数
    * + ?
    {n} {n,} {n,m}

    贪婪匹配.*和惰性匹配.*?
    他昨天吃饭玩手机被老妈发现，然后被骂了。老爸发现他被骂了，然后安慰了他。
    吃饭.*发现    吃饭玩手机被老妈发现，然后被骂了。老爸发现
    .*?          吃饭玩手机被老妈发现

python-re模块
    re.findall(r'正则表达式','字符串')返回列表[列表效率不是很高]-->re.finditer
  **re.finditer(r'正则表达式','字符串')返回迭代器，从迭代器中拿到内容 .group()
    re.search(r'正则表达式','字符串')返回match对象【找到一个就返回】，从match对象里获取内容.group()
    re.match(r'正则表达式','字符串')返回match对象【从头开始匹配】，从match对象里获取内容.group()

预加载正则表达式
obj = re.compile(r'\d{3}-\d{8}|\d{4}-\{7,8}')#这个正则后面反复用到
ret1 = obj.findall(字符串)
ret2 = obj.finditer/search/match(字符串)

(?P<自定义名字>正则表达式) 可以单独从正则匹配到的内容中进一步提取内容


案例：
    豆瓣top250电影排行